/*
_____PROBLEM STATEMENT_____
HackerLand University has the following grading policy:

Every student receives a grade in the inclusive range from 0 to 100.
Any grade less than 40 is a failing grade.
Sam is a professor at the university and likes to round each student's grades according to these rules:

If the difference between the grade and the next multiple of 5 is less than 3, round grade up to the next multiple of 5.
If the value of grade is less than 38, no rounding occurs as the result will still be a failing grade.

****Examples****
Grade 84  round to  85(85 - 84 is less than 3)
Grade 29 do not round (result is less than 40)
Grade 57 do not round (60 - 57 is 3 or higher)

Given the initial value of grade for each of Sam's n students, write code to automate the rounding process.

****Sample Input
4
73
67
38
33

****Sample Output
75
67
40
33

NOTE:
Only the main function and called function are displayed other inbuild hackerrank compiler code is not included for a better understanding of the solution.
*/

int* gradingStudents(int grades_count, int* grades, int *result_count) {
    int n=grades_count;
    *result_count=n;
    int *arr=malloc(n * sizeof(int));
    for(int i=0; i< n; i++){
        if(grades[i]<38){
            arr[i]=grades[i];
        }
        else if((5-grades[i]%5)<3){
            arr[i]=grades[i]+(5-grades[i]%5);
        }
        else{
            arr[i]=grades[i];
        }
    }
    return arr;
}

int main()
{
    FILE* fptr = fopen(getenv("OUTPUT_PATH"), "w");

    int grades_count = parse_int(ltrim(rtrim(readline())));

    int* grades = malloc(grades_count * sizeof(int));

    for (int i = 0; i < grades_count; i++) {
        int grades_item = parse_int(ltrim(rtrim(readline())));

        *(grades + i) = grades_item;
    }

    int result_count;
    int* result = gradingStudents(grades_count, grades, &result_count);

    for (int i = 0; i < result_count; i++) {
        fprintf(fptr, "%d", *(result + i));

        if (i != result_count - 1) {
            fprintf(fptr, "\n");
        }
    }

    fprintf(fptr, "\n");

    fclose(fptr);

    return 0;
}
